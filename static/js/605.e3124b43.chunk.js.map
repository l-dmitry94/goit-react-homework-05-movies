{"version":3,"file":"static/js/605.e3124b43.chunk.js","mappings":"0TAuBA,EArBe,CACXA,KAAMC,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4DAIfC,WAAYH,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sEAKtBG,UAAWL,EAAAA,EAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wCAIpBK,eAAgBP,EAAAA,EAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6F,qECbpBH,EAA+CU,EAAAA,KAA1CN,EAA0CM,EAAAA,WAA9BJ,EAA8BI,EAAAA,UAAlBF,EAAkBE,EAAAA,eAsBvD,EApBiB,SAAHC,GAAoC,IAA9BC,EAAID,EAAJC,KAAMC,EAAKF,EAALE,MAAOC,EAASH,EAATG,UAC7B,OACIC,EAAAA,EAAAA,MAACf,EAAI,CAAAgB,SAAA,EAEGC,EAAAA,EAAAA,KAACb,EAAU,CACPc,IACIL,EAAK,sCAAAM,OACuCN,GACtCO,EAEVC,IAAKT,KAIbK,EAAAA,EAAAA,KAACX,EAAS,CAAAU,SAAEJ,KACZK,EAAAA,EAAAA,KAACT,EAAc,CAAAQ,SAAEF,MAG7B,ECfQQ,ECNO,CACXA,SAAUrB,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qFDKFO,SAkCrB,EAhCa,WACT,IAAAa,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAArB,GAAAsB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACK,OAAnBC,EAAAA,QAAAA,WAAmBH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEIE,EAAAA,EAAAA,eAAmBZ,GAAS,KAAD,EAAxCO,EAAIC,EAAAK,KACVd,EAAQQ,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEdO,QAAQC,IAAIR,EAAAM,GAAMG,SAAS,QAEV,OAFUT,EAAAC,KAAA,GAE3BE,EAAAA,QAAAA,SAAiBH,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAb,EAAA,wBAExB,kBAVc,OAAAxB,EAAAsC,MAAA,KAAAC,UAAA,KAYflB,GACJ,GAAG,CAACH,IAEJ,IAAMsB,EAAWxB,EAAKyB,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAI1C,EAAIyC,EAAJzC,KAAM2C,EAAYF,EAAZE,aAAczC,EAASuC,EAATvC,UAAS,OAC1DG,EAAAA,EAAAA,KAACuC,EAAQ,CAEL5C,KAAMA,EACNC,MAAO0C,EACPzC,UAAWA,GAHNwC,EAIP,IAGN,OAAOrC,EAAAA,EAAAA,KAAAwC,EAAAA,SAAA,CAAAzC,SAAGW,IAAQV,EAAAA,EAAAA,KAACK,EAAQ,CAAAN,SAAEmC,KACjC,C,wDEtCMO,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,QAAS,CACLC,cACI,gOAINrB,EAAM,CACRsB,oBAAoB,WAAD,IAAAC,GAAA/B,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAC,IAAA,IAAA8B,EAAA,OAAA/B,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMmB,EAASQ,IAAI,uBAAuB,KAAD,EAA5C,OAARD,EAAQ5B,EAAAK,KAAAL,EAAA8B,OAAA,SACPF,EAAS7B,KAAKgC,SAAO,wBAAA/B,EAAAW,OAAA,GAAAb,EAAA,KAC/B,yBAAA6B,EAAAf,MAAA,KAAAC,UAAA,EAHmB,GAKpBmB,eAAe,WAAD,IAAAC,GAAArC,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAqC,EAAM1C,GAAO,IAAAoC,EAAA,OAAA/B,IAAAA,MAAA,SAAAsC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cAAAiC,EAAAjC,KAAA,EACFmB,EAASQ,IAAI,UAAD/C,OAAWU,IAAW,KAAD,EAA1C,OAARoC,EAAQO,EAAA9B,KAAA8B,EAAAL,OAAA,SACPF,EAAS7B,MAAI,wBAAAoC,EAAAxB,OAAA,GAAAuB,EAAA,KACvB,gBAAAE,GAAA,OAAAH,EAAArB,MAAA,KAAAC,UAAA,EAHc,GAKfwB,eAAe,WAAD,IAAAC,GAAA1C,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAA0C,EAAM/C,GAAO,IAAAoC,EAAA,OAAA/B,IAAAA,MAAA,SAAA2C,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAtC,KAAA,EACFmB,EAASQ,IAAI,UAAD/C,OAAWU,EAAO,aAAY,KAAD,EAAlD,OAARoC,EAAQY,EAAAnC,KAAAmC,EAAAV,OAAA,SACPF,EAAS7B,KAAKT,MAAI,wBAAAkD,EAAA7B,OAAA,GAAA4B,EAAA,KAC5B,gBAAAE,GAAA,OAAAH,EAAA1B,MAAA,KAAAC,UAAA,EAHc,GAKf6B,kBAAkB,WAAD,IAAAC,GAAA/C,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAA+C,EAAMpD,GAAO,IAAAoC,EAAA,OAAA/B,IAAAA,MAAA,SAAAgD,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACLmB,EAASQ,IAAI,UAAD/C,OAAWU,EAAO,aAAY,KAAD,EAAlD,OAARoC,EAAQiB,EAAAxC,KAAAwC,EAAAf,OAAA,SACPF,EAAS7B,MAAI,wBAAA8C,EAAAlC,OAAA,GAAAiC,EAAA,KACvB,gBAAAE,GAAA,OAAAH,EAAA/B,MAAA,KAAAC,UAAA,EAHiB,GAKlBkC,kBAAkB,WAAD,IAAAC,GAAApD,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAoD,EAAMC,GAAK,IAAAtB,EAAA,OAAA/B,IAAAA,MAAA,SAAAsD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EACHmB,EAASQ,IAAI,uBAAD/C,OAAwBoE,IAAS,KAAD,EAArD,OAARtB,EAAQuB,EAAA9C,KAAA8C,EAAArB,OAAA,SACPF,EAAS7B,KAAKgC,SAAO,wBAAAoB,EAAAxC,OAAA,GAAAsC,EAAA,KAC/B,gBAAAG,GAAA,OAAAJ,EAAApC,MAAA,KAAAC,UAAA,EAHiB,IAMtB,K","sources":["components/Cast/CastItem/CastItem.styled.jsx","components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Styled = {\n    Item: styled.li`\n        flex-basis: calc((100% - 36px) / 4);\n    `,\n\n    ActorImage: styled.img`\n        max-height: 211px;\n        min-height: 211px;\n    `,\n\n    ActorName: styled.h4`\n        font-size: 14px;\n    `,\n\n    ActorCharacter: styled.p`\n        font-weight: 500;\n        font-size: 14px;\n        color: #777777;\n    `,\n};\n\nexport default Styled;\n","import Styled from './CastItem.styled';\nimport defaultImage from '../../../images/no-cast-image.png';\n\nconst { Item,ActorImage, ActorName,  ActorCharacter} = Styled;\n\nconst CastItem = ({ name, photo, character }) => {\n    return (\n        <Item>\n            {\n                <ActorImage\n                    src={\n                        photo\n                            ? `https://image.tmdb.org/t/p/original${photo}`\n                            : defaultImage\n                    }\n                    alt={name}\n                />\n            }\n\n            <ActorName>{name}</ActorName>\n            <ActorCharacter>{character}</ActorCharacter>\n        </Item>\n    );\n};\n\nexport default CastItem;\n","import { Loading } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.7.min.css';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'services/movies-api';\nimport CastItem from './CastItem';\nimport Styled from './Cast.styled';\n\nconst { CastList } = Styled;\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const movieCast = async () => {\n            Loading.standard();\n            try {\n                const data = await API.fetchMovieCast(movieId);\n                setCast(data);\n            } catch (error) {\n                console.log(error.message);\n            } finally {\n                Loading.remove();\n            }\n        };\n\n        movieCast();\n    }, [movieId]);\n\n    const castList = cast.map(({ id, name, profile_path, character }) => (\n        <CastItem\n            key={id}\n            name={name}\n            photo={profile_path}\n            character={character}\n        />\n    ));\n\n    return <>{cast && <CastList>{castList}</CastList>}</>;\n};\n\nexport default Cast;\n","import styled from \"@emotion/styled\"\n\nconst Styled = {\n    CastList: styled.ul`\n        display: flex;\n        flex-wrap: wrap;\n        gap: 12px;\n    `\n}\n\nexport default Styled","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    headers: {\n        Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMzQxZjA4MDA4NmRkZjBkNThjNGJkYzA3ZWY0YTAzNiIsInN1YiI6IjY1YTYzZjQxOWJjZDBmMDEyM2JhNzNmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9KEtiGYN_3JrU51Sf_c_is4ZEHWjNunRsBdl0i-lHic',\n    },\n});\n\nconst API = {\n    fetchTrendingMovies: async () => {\n        const response = await instance.get('/trending/movie/day');\n        return response.data.results;\n    },\n\n    fetchMovieById: async movieId => {\n        const response = await instance.get(`/movie/${movieId}`);\n        return response.data;\n    },\n\n    fetchMovieCast: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/credits`);\n        return response.data.cast;\n    },\n\n    fetchMovieReviews: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    },\n\n    fetchMovieByQuery: async query => {\n        const response = await instance.get(`/search/movie?query=${query}`);\n        return response.data.results;\n    },\n};\n\nexport default API;\n"],"names":["Item","styled","_templateObject","_taggedTemplateLiteral","ActorImage","_templateObject2","ActorName","_templateObject3","ActorCharacter","_templateObject4","Styled","_ref","name","photo","character","_jsxs","children","_jsx","src","concat","defaultImage","alt","CastList","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","useEffect","movieCast","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","Loading","API","sent","t0","console","log","message","finish","stop","apply","arguments","castList","map","_ref2","id","profile_path","CastItem","_Fragment","instance","axios","baseURL","headers","Authorization","fetchTrendingMovies","_fetchTrendingMovies","response","get","abrupt","results","fetchMovieById","_fetchMovieById","_callee2","_context2","_x","fetchMovieCast","_fetchMovieCast","_callee3","_context3","_x2","fetchMovieReviews","_fetchMovieReviews","_callee4","_context4","_x3","fetchMovieByQuery","_fetchMovieByQuery","_callee5","query","_context5","_x4"],"sourceRoot":""}