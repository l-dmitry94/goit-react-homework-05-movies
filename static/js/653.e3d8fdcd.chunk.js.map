{"version":3,"file":"static/js/653.e3d8fdcd.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesItem/MoviesItem.styled.jsx","components/MoviesList/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/helpers.js","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","components/MovieSearch/MovieSearch.jsx","pages/Movies.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Styled = {\n    Item: styled.li`\n        flex-basis: calc((100% - 96px) / 5);\n    `,\n\n    Image: styled.img`\n        height: 268px;\n        margin-bottom: 10px;\n    `,\n\n    Title: styled.h2`\n        font-size: 18px;\n        margin-bottom: 6px;\n    `,\n\n    Year: styled.p``,\n};\n\nexport default Styled;\n","import { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Styled from './MoviesItem.styled';\nimport helpers from 'helpers';\nimport defaultImage from '../../../images/no-movie-image.jpg';\n\nconst { Item, Image, Title, Year } = Styled;\n\nconst MoviesItem = ({ movie }) => {\n    const { id, poster_path, title, release_date } = movie;\n    const [isImageLoaded, setIsImageLoaded] = useState(false);\n    const location = useLocation();\n\n    return (\n        <Item>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n                {movie && (\n                    <>\n                        <Image\n                            src={\n                                poster_path\n                                    ? `https://image.tmdb.org/t/p/original${poster_path}`\n                                    : defaultImage\n                            }\n                            alt={title}\n                            onLoad={() => setIsImageLoaded(true)}\n                        />\n                        {isImageLoaded && (\n                            <>\n                                <Title>{title}</Title>\n                                <Year>\n                                    {helpers.getYear(release_date).toString()}\n                                </Year>\n                            </>\n                        )}\n                    </>\n                )}\n            </Link>\n        </Item>\n    );\n};\n\nexport default MoviesItem;\n","import styled from \"@emotion/styled\"\n\nconst Styled = {\n    Title: styled.h1`\n        margin-bottom: 40px;\n    `,\n\nList: styled.ul`\n    display: flex;\n    flex-wrap: wrap;  \n    gap: 24px;\n    margin-top: 40px;\n`\n}\n\nexport default Styled","import MoviesItem from './MoviesItem';\nimport Styled from './MoviesList.styled';\n\nconst { Title, List } = Styled;\n\nconst MoviesList = ({ title, movies }) => {\n    const moviesList = movies.map(movie => (\n        <MoviesItem key={movie.id} movie={movie} />\n    ));\n\n    return (\n        <>\n            {movies && (\n                <>\n                    {title && <Title>{title}</Title>}\n                    <List>{moviesList}</List>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default MoviesList;\n","const helpers = {\n    getYear: dateString => {\n        const date = new Date(dateString);\n        return date.getFullYear();\n    },\n\n    normalizedArr: arr => {\n        return arr.map(({ name }, index, arr) => (\n            <span key={index}>\n                {name}\n                {index !== arr.length - 1 ? ', ' : ''}\n            </span>\n        ));\n    }\n}\n\nexport default helpers","import styled from '@emotion/styled';\nimport { ImSearch } from 'react-icons/im';\n\nconst Styled = {\n    FormWrapper: styled.div`\n        display: flex;\n        justify-content: center;\n    `,\n    Form: styled.form`\n        position: relative;\n    `,\n\n    Input: styled.input`\n        width: 300px;\n        height: 36px;\n        outline: transparent;\n        border-radius: 10px;\n        border: 1px solid #afafaf;\n        font-size: 18px;\n        padding: 0px 15px;\n    `,\n\n    SearchButton: styled.button`\n        position: absolute;\n        right: 15px;\n        top: 50%;\n        transform: translateY(-50%);\n    `,\n\n    SearchIcon: styled(ImSearch)`\n        width: 18px;\n        height: 18px;\n        fill: #6e6e6e;\n    `,\n};\n\nexport default Styled;\n","import Styled from './SearchForm.styled';\n\nconst { Form, Input, SearchIcon, FormWrapper, SearchButton } = Styled;\n\nconst SearchForm = ({\n    inputValue,\n    handleChange,\n    handleSubmit,\n    type = 'submit',\n}) => {\n    return (\n        <FormWrapper>\n            <Form onSubmit={handleSubmit}>\n                <Input\n                    type=\"text\"\n                    name=\"search\"\n                    placeholder='Search...'\n                    value={inputValue}\n                    onChange={handleChange}\n                />\n                <SearchButton type={type}>\n                    <SearchIcon />\n                </SearchButton>\n            </Form>\n        </FormWrapper>\n    );\n};\n\nexport default SearchForm;\n","import MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { Notify, Loading } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.7.min.css';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport API from 'services/movies-api';\n\nconst MovieSearch = () => {\n    const [movies, setMovies] = useState(null);\n    const [inputValue, setInputValue] = useState('');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const search = searchParams.get('search') ?? '';\n\n    useEffect(() => {\n        setInputValue(search);\n    }, [search]);\n\n    useEffect(() => {\n        const movieSearch = async () => {\n            if (!search) {\n                return;\n            }\n\n            Loading.standard();\n\n            try {\n                const data = await API.fetchMovieByQuery(search);\n                if (data?.length === 0) {\n                    setMovies(null);\n                    Notify.failure('Not Found');\n                    return;\n                }\n                setMovies(data);\n            } catch (error) {\n                console.log(error.message);\n            } finally {\n                Loading.remove();\n            }\n        };\n        movieSearch();\n    }, [search]);\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        const form = event.currentTarget;\n        if (!form.elements.search.value) {\n            return;\n        }\n\n        setSearchParams({ search: form.elements.search.value });\n    };\n\n    return (\n        <>\n            <SearchForm\n                inputValue={inputValue}\n                handleChange={event => setInputValue(event.target.value)}\n                handleSubmit={handleSubmit}\n                type=\"submit\"\n            />\n            {movies && <MoviesList movies={movies} />}\n        </>\n    );\n};\n\nexport default MovieSearch;\n","import MovieSearch from 'components/MovieSearch';\n\nconst Movies = () => {\n    return <MovieSearch />;\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    headers: {\n        Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMzQxZjA4MDA4NmRkZjBkNThjNGJkYzA3ZWY0YTAzNiIsInN1YiI6IjY1YTYzZjQxOWJjZDBmMDEyM2JhNzNmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9KEtiGYN_3JrU51Sf_c_is4ZEHWjNunRsBdl0i-lHic',\n    },\n});\n\nconst API = {\n    fetchTrendingMovies: async () => {\n        const response = await instance.get('/trending/movie/day');\n        return response.data.results;\n    },\n\n    fetchMovieById: async movieId => {\n        const response = await instance.get(`/movie/${movieId}`);\n        return response.data;\n    },\n\n    fetchMovieCast: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/credits`);\n        return response.data.cast;\n    },\n\n    fetchMovieReviews: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    },\n\n    fetchMovieByQuery: async query => {\n        const response = await instance.get(`/search/movie?query=${query}`);\n        return response.data.results;\n    },\n};\n\nexport default API;\n"],"names":["Item","styled","_templateObject","_taggedTemplateLiteral","Image","_templateObject2","Title","_templateObject3","Year","_templateObject4","Styled","_ref","movie","id","poster_path","title","release_date","_useState","useState","_useState2","_slicedToArray","isImageLoaded","setIsImageLoaded","location","useLocation","_jsx","children","Link","to","concat","state","from","_jsxs","_Fragment","src","defaultImage","alt","onLoad","helpers","toString","List","movies","moviesList","map","MoviesItem","getYear","dateString","Date","getFullYear","normalizedArr","arr","index","name","length","FormWrapper","Form","Input","SearchButton","SearchIcon","ImSearch","_templateObject5","inputValue","handleChange","handleSubmit","_ref$type","type","onSubmit","placeholder","value","onChange","_searchParams$get","setMovies","_useState3","_useState4","setInputValue","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","search","get","useEffect","movieSearch","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","abrupt","Loading","API","sent","Notify","t0","console","log","message","finish","stop","apply","arguments","SearchForm","event","target","preventDefault","form","currentTarget","elements","MoviesList","MovieSearch","instance","axios","baseURL","headers","Authorization","fetchTrendingMovies","_fetchTrendingMovies","response","results","fetchMovieById","_fetchMovieById","_callee2","movieId","_context2","_x","fetchMovieCast","_fetchMovieCast","_callee3","_context3","cast","_x2","fetchMovieReviews","_fetchMovieReviews","_callee4","_context4","_x3","fetchMovieByQuery","_fetchMovieByQuery","_callee5","query","_context5","_x4"],"sourceRoot":""}