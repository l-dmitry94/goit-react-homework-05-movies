{"version":3,"file":"static/js/321.c1d4930a.chunk.js","mappings":"8PAoBA,EAlBe,CACXA,KAAMC,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4DAIfC,MAAOH,EAAAA,EAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oEAKjBG,MAAOL,EAAAA,EAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qEAKhBK,KAAMP,EAAAA,EAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,S,gFCXVH,EAA6BU,EAAAA,KAAvBN,EAAuBM,EAAAA,MAAhBJ,EAAgBI,EAAAA,MAATF,EAASE,EAAAA,KAoCrC,EAlCmB,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MACVC,EAAyCD,EAAzCC,GAAIC,EAAqCF,EAArCE,YAAaC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,aAChCC,GAA0CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAChCI,GAAWC,EAAAA,EAAAA,MAEjB,OACIC,EAAAA,EAAAA,KAACzB,EAAI,CAAA0B,UACDD,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAahB,GAAMiB,MAAO,CAAEC,KAAMR,GAAWG,SAChDd,IACGoB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,EACID,EAAAA,EAAAA,KAACrB,EAAK,CACF8B,IACIpB,EAAW,sCAAAe,OACiCf,GACtCqB,EAEVC,IAAKrB,EACLsB,OAAQ,kBAAMf,GAAiB,EAAK,IAEvCD,IACGW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,EACID,EAAAA,EAAAA,KAACnB,EAAK,CAAAoB,SAAEX,KACRU,EAAAA,EAAAA,KAACjB,EAAI,CAAAkB,SACAY,EAAAA,EAAAA,QAAgBtB,GAAcuB,sBASnE,ECtCM7B,EAAS,CACXJ,MAAOL,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4CAIpBqC,KAAMvC,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8FCJPG,EDYR,ECZwBI,MAAT8B,EDYf,ECZwB9B,KAmBxB,EAjBmB,SAAHC,GAA2B,IAArBI,EAAKJ,EAALI,MAAO0B,EAAM9B,EAAN8B,OACnBC,EAAaD,EAAOE,KAAI,SAAA/B,GAAK,OAC/Ba,EAAAA,EAAAA,KAACmB,EAAU,CAAgBhC,MAAOA,GAAjBA,EAAMC,GAAoB,IAG/C,OACIY,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAP,SACKe,IACGT,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,CACKX,IAASU,EAAAA,EAAAA,KAACnB,EAAK,CAAAoB,SAAEX,KAClBU,EAAAA,EAAAA,KAACe,EAAI,CAAAd,SAAEgB,QAK3B,C,oECJA,EAhBgB,CACZG,QAAS,SAAAC,GAEL,OADa,IAAIC,KAAKD,GACVE,aAChB,EAEAC,cAAe,SAAAC,GACX,OAAOA,EAAIP,KAAI,SAAAhC,EAAWwC,EAAOD,GAAG,IAAlBE,EAAIzC,EAAJyC,KAAI,OAClBpB,EAAAA,EAAAA,MAAA,QAAAN,SAAA,CACK0B,EACAD,IAAUD,EAAIG,OAAS,EAAI,KAAO,KAF5BF,EAGJ,GAEf,E,oICgBJ,UAtBa,WACT,IAAAlC,GAAyCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDqC,EAAYnC,EAAA,GAAEoC,EAAgBpC,EAAA,GAkBrC,OAhBAqC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,eAAA9C,GAAA+C,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACA,OAAnBC,EAAAA,QAAAA,WAAmBH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEIE,EAAAA,EAAAA,sBAA0B,KAAD,EAAtCL,EAAIC,EAAAK,KACVZ,EAAiBM,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEvBO,QAAQC,IAAIR,EAAAM,GAAMG,SAAS,QAEV,OAFUT,EAAAC,KAAA,GAE3BE,EAAAA,QAAAA,SAAiBH,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAb,EAAA,wBAExB,kBAVmB,OAAAjD,EAAA+D,MAAA,KAAAC,UAAA,KAYpBlB,GACJ,GAAG,KAEIhC,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,CAAAP,SAAG4B,IAAgB7B,EAAAA,EAAAA,KAACmD,EAAAA,EAAU,CAAC7D,MAAM,iBAAiB0B,OAAQa,KACzE,C,wDCzBMuB,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,QAAS,CACLC,cACI,gOAINf,EAAM,CACRgB,oBAAoB,WAAD,IAAAC,GAAAzB,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAC,IAAA,IAAAwB,EAAA,OAAAzB,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMa,EAASQ,IAAI,uBAAuB,KAAD,EAA5C,OAARD,EAAQtB,EAAAK,KAAAL,EAAAwB,OAAA,SACPF,EAASvB,KAAK0B,SAAO,wBAAAzB,EAAAW,OAAA,GAAAb,EAAA,KAC/B,yBAAAuB,EAAAT,MAAA,KAAAC,UAAA,EAHmB,GAKpBa,eAAe,WAAD,IAAAC,GAAA/B,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAA+B,EAAMC,GAAO,IAAAP,EAAA,OAAAzB,IAAAA,MAAA,SAAAiC,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,cAAA4B,EAAA5B,KAAA,EACFa,EAASQ,IAAI,UAADxD,OAAW8D,IAAW,KAAD,EAA1C,OAARP,EAAQQ,EAAAzB,KAAAyB,EAAAN,OAAA,SACPF,EAASvB,MAAI,wBAAA+B,EAAAnB,OAAA,GAAAiB,EAAA,KACvB,gBAAAG,GAAA,OAAAJ,EAAAf,MAAA,KAAAC,UAAA,EAHc,GAKfmB,eAAe,WAAD,IAAAC,GAAArC,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAqC,EAAML,GAAO,IAAAP,EAAA,OAAAzB,IAAAA,MAAA,SAAAsC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cAAAiC,EAAAjC,KAAA,EACFa,EAASQ,IAAI,UAADxD,OAAW8D,EAAO,aAAY,KAAD,EAAlD,OAARP,EAAQa,EAAA9B,KAAA8B,EAAAX,OAAA,SACPF,EAASvB,KAAKqC,MAAI,wBAAAD,EAAAxB,OAAA,GAAAuB,EAAA,KAC5B,gBAAAG,GAAA,OAAAJ,EAAArB,MAAA,KAAAC,UAAA,EAHc,GAKfyB,kBAAkB,WAAD,IAAAC,GAAA3C,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAA2C,EAAMX,GAAO,IAAAP,EAAA,OAAAzB,IAAAA,MAAA,SAAA4C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAvC,KAAA,EACLa,EAASQ,IAAI,UAADxD,OAAW8D,EAAO,aAAY,KAAD,EAAlD,OAARP,EAAQmB,EAAApC,KAAAoC,EAAAjB,OAAA,SACPF,EAASvB,MAAI,wBAAA0C,EAAA9B,OAAA,GAAA6B,EAAA,KACvB,gBAAAE,GAAA,OAAAH,EAAA3B,MAAA,KAAAC,UAAA,EAHiB,GAKlB8B,kBAAkB,WAAD,IAAAC,GAAAhD,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAgD,EAAMC,GAAK,IAAAxB,EAAA,OAAAzB,IAAAA,MAAA,SAAAkD,GAAA,cAAAA,EAAA9C,KAAA8C,EAAA7C,MAAA,cAAA6C,EAAA7C,KAAA,EACHa,EAASQ,IAAI,uBAADxD,OAAwB+E,IAAS,KAAD,EAArD,OAARxB,EAAQyB,EAAA1C,KAAA0C,EAAAvB,OAAA,SACPF,EAASvB,KAAK0B,SAAO,wBAAAsB,EAAApC,OAAA,GAAAkC,EAAA,KAC/B,gBAAAG,GAAA,OAAAJ,EAAAhC,MAAA,KAAAC,UAAA,EAHiB,IAMtB,K","sources":["components/MoviesList/MoviesItem/MoviesItem.styled.jsx","components/MoviesList/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","helpers/helpers.js","pages/Home.jsx","services/movies-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Styled = {\n    Item: styled.li`\n        flex-basis: calc((100% - 96px) / 5);\n    `,\n\n    Image: styled.img`\n        height: 268px;\n        margin-bottom: 10px;\n    `,\n\n    Title: styled.h2`\n        font-size: 18px;\n        margin-bottom: 6px;\n    `,\n\n    Year: styled.p``,\n};\n\nexport default Styled;\n","import { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport Styled from './MoviesItem.styled';\nimport helpers from 'helpers';\nimport defaultImage from '../../../images/no-movie-image.jpg';\n\nconst { Item, Image, Title, Year } = Styled;\n\nconst MoviesItem = ({ movie }) => {\n    const { id, poster_path, title, release_date } = movie;\n    const [isImageLoaded, setIsImageLoaded] = useState(false);\n    const location = useLocation();\n\n    return (\n        <Item>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n                {movie && (\n                    <>\n                        <Image\n                            src={\n                                poster_path\n                                    ? `https://image.tmdb.org/t/p/original${poster_path}`\n                                    : defaultImage\n                            }\n                            alt={title}\n                            onLoad={() => setIsImageLoaded(true)}\n                        />\n                        {isImageLoaded && (\n                            <>\n                                <Title>{title}</Title>\n                                <Year>\n                                    {helpers.getYear(release_date).toString()}\n                                </Year>\n                            </>\n                        )}\n                    </>\n                )}\n            </Link>\n        </Item>\n    );\n};\n\nexport default MoviesItem;\n","import styled from \"@emotion/styled\"\n\nconst Styled = {\n    Title: styled.h1`\n        margin-bottom: 40px;\n    `,\n\nList: styled.ul`\n    display: flex;\n    flex-wrap: wrap;  \n    gap: 24px;\n    margin-top: 40px;\n`\n}\n\nexport default Styled","import MoviesItem from './MoviesItem';\nimport Styled from './MoviesList.styled';\n\nconst { Title, List } = Styled;\n\nconst MoviesList = ({ title, movies }) => {\n    const moviesList = movies.map(movie => (\n        <MoviesItem key={movie.id} movie={movie} />\n    ));\n\n    return (\n        <>\n            {movies && (\n                <>\n                    {title && <Title>{title}</Title>}\n                    <List>{moviesList}</List>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default MoviesList;\n","const helpers = {\n    getYear: dateString => {\n        const date = new Date(dateString);\n        return date.getFullYear();\n    },\n\n    normalizedArr: arr => {\n        return arr.map(({ name }, index, arr) => (\n            <span key={index}>\n                {name}\n                {index !== arr.length - 1 ? ', ' : ''}\n            </span>\n        ));\n    }\n}\n\nexport default helpers","import { Loading } from 'notiflix';\nimport \"notiflix/dist/notiflix-3.2.7.min.css\"\nimport { useEffect, useState } from 'react';\nimport MoviesList from 'components/MoviesList';\n\nimport API from 'services/movies-api';\n\nconst Home = () => {\n    const [trendsMovies, setTrendsMoviess] = useState(null);\n\n    useEffect(() => {\n        const trendingMovies = async () => {\n            Loading.standard();\n            try {\n                const data = await API.fetchTrendingMovies();\n                setTrendsMoviess(data);\n            } catch (error) {\n                console.log(error.message);\n            } finally {\n                Loading.remove();\n            }\n        };\n\n        trendingMovies();\n    }, []);\n\n    return <>{trendsMovies && <MoviesList title=\"Trending Today\" movies={trendsMovies} />}</>;\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    headers: {\n        Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMzQxZjA4MDA4NmRkZjBkNThjNGJkYzA3ZWY0YTAzNiIsInN1YiI6IjY1YTYzZjQxOWJjZDBmMDEyM2JhNzNmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9KEtiGYN_3JrU51Sf_c_is4ZEHWjNunRsBdl0i-lHic',\n    },\n});\n\nconst API = {\n    fetchTrendingMovies: async () => {\n        const response = await instance.get('/trending/movie/day');\n        return response.data.results;\n    },\n\n    fetchMovieById: async movieId => {\n        const response = await instance.get(`/movie/${movieId}`);\n        return response.data;\n    },\n\n    fetchMovieCast: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/credits`);\n        return response.data.cast;\n    },\n\n    fetchMovieReviews: async movieId => {\n        const response = await instance.get(`/movie/${movieId}/reviews`);\n        return response.data;\n    },\n\n    fetchMovieByQuery: async query => {\n        const response = await instance.get(`/search/movie?query=${query}`);\n        return response.data.results;\n    },\n};\n\nexport default API;\n"],"names":["Item","styled","_templateObject","_taggedTemplateLiteral","Image","_templateObject2","Title","_templateObject3","Year","_templateObject4","Styled","_ref","movie","id","poster_path","title","release_date","_useState","useState","_useState2","_slicedToArray","isImageLoaded","setIsImageLoaded","location","useLocation","_jsx","children","Link","to","concat","state","from","_jsxs","_Fragment","src","defaultImage","alt","onLoad","helpers","toString","List","movies","moviesList","map","MoviesItem","getYear","dateString","Date","getFullYear","normalizedArr","arr","index","name","length","trendsMovies","setTrendsMoviess","useEffect","trendingMovies","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","Loading","API","sent","t0","console","log","message","finish","stop","apply","arguments","MoviesList","instance","axios","baseURL","headers","Authorization","fetchTrendingMovies","_fetchTrendingMovies","response","get","abrupt","results","fetchMovieById","_fetchMovieById","_callee2","movieId","_context2","_x","fetchMovieCast","_fetchMovieCast","_callee3","_context3","cast","_x2","fetchMovieReviews","_fetchMovieReviews","_callee4","_context4","_x3","fetchMovieByQuery","_fetchMovieByQuery","_callee5","query","_context5","_x4"],"sourceRoot":""}